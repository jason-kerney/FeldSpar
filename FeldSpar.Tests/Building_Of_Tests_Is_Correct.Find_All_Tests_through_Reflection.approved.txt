Test[00] is ((A test that succeeds))
Test[01] is ((A test to check verification))
Test[02] is ((An exception thrown in a test should report exception failure))
Test[03] is ((Can Build Report from Execution Summaries))
Test[04] is ((Can Build Report from Execution Summaries Sorted by numeric Values))
Test[05] is ((Can Create multiple Tests From one Theory Test))
Test[06] is ((Can Detect the correct version))
Test[07] is ((Can sort alpha words))
Test[08] is ((Can sort basic alphas))
Test[09] is ((Can sort numbers))
Test[10] is ((Can sort numbers and strings))
Test[11] is ((Can sort tuples by words with numbers as a sequence))
Test[12] is ((Can sort words with numbers))
Test[13] is ((Can test a query))
Test[14] is ((Combinatory Gold Standard Testing))
Test[15] is ((Find All Tests through Reflection))
Test[16] is ((Fizz Buzzer return Buzz for 5))
Test[17] is ((Fizz Buzzer returns 'Buzz' for all multiples of 5 up to 10))
Test[18] is ((Fizz Buzzer returns 'Fizz' for multiples of 3 up to 10))
Test[19] is ((Fizz Buzzer returns 'FizzBuzz' for 15))
Test[20] is ((Fizz Buzzer returns 'FizzBuzz' for all numbers that are multiples of 3 and 5 up to 32))
Test[21] is ((Fizz Buzzer returns 1 when given a one))
Test[22] is ((Fizz Buzzer returns Fizz when given 3))
Test[23] is ((Fizz Buzzer returns the correct Fizz Buzz or FizzBuzz for every number up to 500))
Test[24] is ((Here is a second theory test. (1.000000 * 1.000000) / 1.000000 = 1.000000))
Test[25] is ((Here is a second theory test. (10.000000 * 10.000000) / 10.000000 = 10.000000))
Test[26] is ((Here is a second theory test. (11.000000 * 11.000000) / 11.000000 = 11.000000))
Test[27] is ((Here is a second theory test. (12.000000 * 12.000000) / 12.000000 = 12.000000))
Test[28] is ((Here is a second theory test. (13.000000 * 13.000000) / 13.000000 = 13.000000))
Test[29] is ((Here is a second theory test. (14.000000 * 14.000000) / 14.000000 = 14.000000))
Test[30] is ((Here is a second theory test. (15.000000 * 15.000000) / 15.000000 = 15.000000))
Test[31] is ((Here is a second theory test. (16.000000 * 16.000000) / 16.000000 = 16.000000))
Test[32] is ((Here is a second theory test. (17.000000 * 17.000000) / 17.000000 = 17.000000))
Test[33] is ((Here is a second theory test. (18.000000 * 18.000000) / 18.000000 = 18.000000))
Test[34] is ((Here is a second theory test. (19.000000 * 19.000000) / 19.000000 = 19.000000))
Test[35] is ((Here is a second theory test. (2.000000 * 2.000000) / 2.000000 = 2.000000))
Test[36] is ((Here is a second theory test. (20.000000 * 20.000000) / 20.000000 = 20.000000))
Test[37] is ((Here is a second theory test. (3.000000 * 3.000000) / 3.000000 = 3.000000))
Test[38] is ((Here is a second theory test. (4.000000 * 4.000000) / 4.000000 = 4.000000))
Test[39] is ((Here is a second theory test. (5.000000 * 5.000000) / 5.000000 = 5.000000))
Test[40] is ((Here is a second theory test. (6.000000 * 6.000000) / 6.000000 = 6.000000))
Test[41] is ((Here is a second theory test. (7.000000 * 7.000000) / 7.000000 = 7.000000))
Test[42] is ((Here is a second theory test. (8.000000 * 8.000000) / 8.000000 = 8.000000))
Test[43] is ((Here is a second theory test. (9.000000 * 9.000000) / 9.000000 = 9.000000))
Test[44] is ((Report exports to JSON))
Test[45] is ((Summaries are correct))
Test[46] is ((Test that a failing test shows as a failure))
Test[47] is ((Test that shuffle works correctly))
Test[48] is ((Testing that CanoicalizationOfStrings Works))
Test[49] is ((The environment of a test should canonicalize the description correctly into the name))
Test[50] is ((This is a theory Test.test converts 1 into "1"))
Test[51] is ((This is a theory Test.test converts 10 into "Buzz"))
Test[52] is ((This is a theory Test.test converts 15 into "FizzBuzz"))
Test[53] is ((This is a theory Test.test converts 2 into "2"))
Test[54] is ((This is a theory Test.test converts 3 into "Fizz"))
Test[55] is ((This is a theory Test.test converts 5 into "Buzz"))
Test[56] is ((This is a theory Test.test converts 6 into "Fizz"))
Test[57] is ((This is an ignored test))
Test[58] is ((We get the correct environment))
Test[59] is ((expectsNotToBe fails if equal))
Test[60] is ((expectsNotToBe will succeed for "5" expectsNotToBe "6"))
Test[61] is ((expectsToBeFalse fails when true))
Test[62] is ((expectsToBeFalse passes when false))
Test[63] is ((expectsToBeTrue fails when false))
Test[64] is ((expectsToBeTrue passes when true))
Test[65] is ((filterByFailures should remove any non failing tests summaries from a collection of result summaries))
Test[66] is ((isNull fails if nof null))
Test[67] is ((isNull succeeds if null))
