Test[000] is ((A test should not require a setup))
Test[001] is ((A test with a setup should return TestEnvironment -> SetupFlow<'a>))
Test[002] is ((A test with a setup should return an exception failure if the test throws an exception))
Test[003] is ((A test with a setup should return the failure when the test fails))
Test[004] is ((A test with a setup should return the setup failure without running the test if the setup fails))
Test[005] is ((A test with a setup should returns success when the test returns success))
Test[006] is ((A test without a setup should calls teardown even if it throws an exception))
Test[007] is ((A test without a setup should return success if the test is successful))
Test[008] is ((A test without a setup should returns the failure if the test fails))
Test[009] is ((Building Of Tests Is Correct A test that succeeds))
Test[010] is ((Building Of Tests Is Correct An exception thrown in a test should report exception failure))
Test[011] is ((Building Of Tests Is Correct Can Build Report from Execution Summaries))
Test[012] is ((Building Of Tests Is Correct Can Build Report from Execution Summaries Sorted by numeric Values))
Test[013] is ((Building Of Tests Is Correct Can Create multiple Tests From one Theory Test))
Test[014] is ((Building Of Tests Is Correct Find All Tests through Reflection))
Test[015] is ((Building Of Tests Is Correct Report exports to JSON))
Test[016] is ((Building Of Tests Is Correct Summaries are correct))
Test[017] is ((Building Of Tests Is Correct Test that a failing test shows as a failure))
Test[018] is ((Building Of Tests Is Correct Testing that CanoicalizationOfStrings Works))
Test[019] is ((Building Of Tests Is Correct The environment of a test should canonicalize the description correctly into the name))
Test[020] is ((Building Of Tests Is Correct We get the correct environment))
Test[021] is ((DotNetFrameworkTests Can Detect the correct version))
Test[022] is ((DotNetFrameworkTests Environment has correct version))
Test[023] is ((Example Fizz Buzzer return Buzz for 5))
Test[024] is ((Example Fizz Buzzer returns 'Buzz' for all multiples of 5 up to 10))
Test[025] is ((Example Fizz Buzzer returns 'Fizz' for multiples of 3 up to 10))
Test[026] is ((Example Fizz Buzzer returns 'FizzBuzz' for 15))
Test[027] is ((Example Fizz Buzzer returns 'FizzBuzz' for all numbers that are multiples of 3 and 5 up to 32))
Test[028] is ((Example Fizz Buzzer returns 1 when given a one))
Test[029] is ((Example Fizz Buzzer returns Fizz when given 3))
Test[030] is ((Example Fizz Buzzer returns the correct Fizz Buzz or FizzBuzz for every number up to 500))
Test[031] is ((ExpectationTests expectToContain will fail when given a sub list that has a new item))
Test[032] is ((ExpectationTests expectToContain will pass when given a sub list))
Test[033] is ((ExpectationTests expectToContain will pass win a sub sequence is out of order))
Test[034] is ((ExpectationTests expectsNotToBe fails if equal))
Test[035] is ((ExpectationTests expectsNotToBe will succeed for "5" expectsNotToBe "6"))
Test[036] is ((ExpectationTests expectsNotToContain will fail if all elements are contained))
Test[037] is ((ExpectationTests expectsNotToContain will pass if any element of a sequence differs))
Test[038] is ((ExpectationTests expectsToBeFalse fails when true))
Test[039] is ((ExpectationTests expectsToBeFalse passes when false))
Test[040] is ((ExpectationTests expectsToBeTrue fails when false))
Test[041] is ((ExpectationTests expectsToBeTrue passes when true))
Test[042] is ((ExpectationTests expectsToNotContainAnyOf will fail if any item is shared between 2 collections))
Test[043] is ((ExpectationTests expectsToNotContainAnyOf will pass if all items are different))
Test[044] is ((ExpectationTests expectsToOnlyContain will fail if the items a has aone less))
Test[045] is ((ExpectationTests expectsToOnlyContain will pass if 2 sequences contain the same eliments no matter order))
Test[046] is ((ExpectationTests isNull fails if nof null))
Test[047] is ((ExpectationTests isNull succeeds if null))
Test[048] is ((ExploritoryTests Combinatory Gold Standard Testing))
Test[049] is ((ExploritoryTests Test that shuffle works correctly))
Test[050] is ((ExploritoryTests This is an ignored test))
Test[051] is ((FilteringTests filterByFailures should remove any non failing tests summaries from a collection of result summaries))
Test[052] is ((NaturalSortTests Can sort alpha words))
Test[053] is ((NaturalSortTests Can sort basic alphas))
Test[054] is ((NaturalSortTests Can sort numbers))
Test[055] is ((NaturalSortTests Can sort numbers and strings))
Test[056] is ((NaturalSortTests Can sort tuples by words with numbers as a sequence))
Test[057] is ((NaturalSortTests Can sort words with numbers))
Test[058] is ((Setup should be able to return a differnt environment then what was passed in))
Test[059] is ((Setup should return (Success, data, test environment) when successful))
Test[060] is ((Setup should return a TestEnvironment -> SetupFlow<'a> when beforeTest is called))
Test[061] is ((Setup should returns TestFlow.SetupFailure when the setup returns something other then success))
Test[062] is ((Setup should returns TestFlow.SetupFailure when the setup throws exception))
Test[063] is ((StandardsVerificationTests A test to check verification))
Test[064] is ((StandardsVerificationTests Can build the test of a query))
Test[065] is ((StandardsVerificationTests Can test a query))
Test[066] is ((Teardown should be called if everything passes))
Test[067] is ((Teardown should return TestTemplate when setup, test and teardown are combined))
Test[068] is ((Teardown should return success when everything passes))
Test[069] is ((Theory`1 Here is a second theory test. (1.000000 * 1.000000) / 1.000000 = 1.000000))
Test[070] is ((Theory`1 Here is a second theory test. (10.000000 * 10.000000) / 10.000000 = 10.000000))
Test[071] is ((Theory`1 Here is a second theory test. (11.000000 * 11.000000) / 11.000000 = 11.000000))
Test[072] is ((Theory`1 Here is a second theory test. (12.000000 * 12.000000) / 12.000000 = 12.000000))
Test[073] is ((Theory`1 Here is a second theory test. (13.000000 * 13.000000) / 13.000000 = 13.000000))
Test[074] is ((Theory`1 Here is a second theory test. (14.000000 * 14.000000) / 14.000000 = 14.000000))
Test[075] is ((Theory`1 Here is a second theory test. (15.000000 * 15.000000) / 15.000000 = 15.000000))
Test[076] is ((Theory`1 Here is a second theory test. (16.000000 * 16.000000) / 16.000000 = 16.000000))
Test[077] is ((Theory`1 Here is a second theory test. (17.000000 * 17.000000) / 17.000000 = 17.000000))
Test[078] is ((Theory`1 Here is a second theory test. (18.000000 * 18.000000) / 18.000000 = 18.000000))
Test[079] is ((Theory`1 Here is a second theory test. (19.000000 * 19.000000) / 19.000000 = 19.000000))
Test[080] is ((Theory`1 Here is a second theory test. (2.000000 * 2.000000) / 2.000000 = 2.000000))
Test[081] is ((Theory`1 Here is a second theory test. (20.000000 * 20.000000) / 20.000000 = 20.000000))
Test[082] is ((Theory`1 Here is a second theory test. (3.000000 * 3.000000) / 3.000000 = 3.000000))
Test[083] is ((Theory`1 Here is a second theory test. (4.000000 * 4.000000) / 4.000000 = 4.000000))
Test[084] is ((Theory`1 Here is a second theory test. (5.000000 * 5.000000) / 5.000000 = 5.000000))
Test[085] is ((Theory`1 Here is a second theory test. (6.000000 * 6.000000) / 6.000000 = 6.000000))
Test[086] is ((Theory`1 Here is a second theory test. (7.000000 * 7.000000) / 7.000000 = 7.000000))
Test[087] is ((Theory`1 Here is a second theory test. (8.000000 * 8.000000) / 8.000000 = 8.000000))
Test[088] is ((Theory`1 Here is a second theory test. (9.000000 * 9.000000) / 9.000000 = 9.000000))
Test[089] is ((Theory`1 This is a theory Test.test converts 1 into "1"))
Test[090] is ((Theory`1 This is a theory Test.test converts 10 into "Buzz"))
Test[091] is ((Theory`1 This is a theory Test.test converts 15 into "FizzBuzz"))
Test[092] is ((Theory`1 This is a theory Test.test converts 2 into "2"))
Test[093] is ((Theory`1 This is a theory Test.test converts 3 into "Fizz"))
Test[094] is ((Theory`1 This is a theory Test.test converts 5 into "Buzz"))
Test[095] is ((Theory`1 This is a theory Test.test converts 6 into "Fizz"))
Test[096] is ((When setup fails teardown should be called))
Test[097] is ((When setup fails teardown should be called with no data if setup threw an exception))
Test[098] is ((When setup fails teardown should get the failure))
Test[099] is ((When setup fails teardown should recieve the setup data))
Test[100] is ((When setup fails teardown should return with the setup failure even when teardown succeeds))
Test[101] is ((When the test fails teardown should be called))
Test[102] is ((When the test fails teardown should be called with setup data even if failure is an exception))
Test[103] is ((When the test fails teardown should be called with the failure from the test))
Test[104] is ((When the test fails teardown should return the test failure if the teardown succeeds))
