Test[00] is ((A test with a setup should return TestEnvironment -> SetupFlow<'a>))
Test[01] is ((A test with a setup should return an exception failure if the test throws an exception))
Test[02] is ((A test with a setup should return the failure when the test fails))
Test[03] is ((A test with a setup should return the setup failure without running the test if the setup fails))
Test[04] is ((Building Of Tests Is Correct A test that succeeds))
Test[05] is ((Building Of Tests Is Correct An exception thrown in a test should report exception failure))
Test[06] is ((Building Of Tests Is Correct Can Build Report from Execution Summaries))
Test[07] is ((Building Of Tests Is Correct Can Build Report from Execution Summaries Sorted by numeric Values))
Test[08] is ((Building Of Tests Is Correct Can Create multiple Tests From one Theory Test))
Test[09] is ((Building Of Tests Is Correct Find All Tests through Reflection))
Test[10] is ((Building Of Tests Is Correct Report exports to JSON))
Test[11] is ((Building Of Tests Is Correct Summaries are correct))
Test[12] is ((Building Of Tests Is Correct Test that a failing test shows as a failure))
Test[13] is ((Building Of Tests Is Correct Testing that CanoicalizationOfStrings Works))
Test[14] is ((Building Of Tests Is Correct The environment of a test should canonicalize the description correctly into the name))
Test[15] is ((Building Of Tests Is Correct We get the correct environment))
Test[16] is ((DotNetFrameworkTests Can Detect the correct version))
Test[17] is ((DotNetFrameworkTests Environment has correct version))
Test[18] is ((Example Fizz Buzzer return Buzz for 5))
Test[19] is ((Example Fizz Buzzer returns 'Buzz' for all multiples of 5 up to 10))
Test[20] is ((Example Fizz Buzzer returns 'Fizz' for multiples of 3 up to 10))
Test[21] is ((Example Fizz Buzzer returns 'FizzBuzz' for 15))
Test[22] is ((Example Fizz Buzzer returns 'FizzBuzz' for all numbers that are multiples of 3 and 5 up to 32))
Test[23] is ((Example Fizz Buzzer returns 1 when given a one))
Test[24] is ((Example Fizz Buzzer returns Fizz when given 3))
Test[25] is ((Example Fizz Buzzer returns the correct Fizz Buzz or FizzBuzz for every number up to 500))
Test[26] is ((ExpectationTests expectToContain will fail when given a sub list that has a new item))
Test[27] is ((ExpectationTests expectToContain will pass when given a sub list))
Test[28] is ((ExpectationTests expectToContain will pass win a sub sequence is out of order))
Test[29] is ((ExpectationTests expectsNotToBe fails if equal))
Test[30] is ((ExpectationTests expectsNotToBe will succeed for "5" expectsNotToBe "6"))
Test[31] is ((ExpectationTests expectsNotToContain will fail if all elements are contained))
Test[32] is ((ExpectationTests expectsNotToContain will pass if any element of a sequence differs))
Test[33] is ((ExpectationTests expectsToBeFalse fails when true))
Test[34] is ((ExpectationTests expectsToBeFalse passes when false))
Test[35] is ((ExpectationTests expectsToBeTrue fails when false))
Test[36] is ((ExpectationTests expectsToBeTrue passes when true))
Test[37] is ((ExpectationTests expectsToNotContainAnyOf will fail if any item is shared between 2 collections))
Test[38] is ((ExpectationTests expectsToNotContainAnyOf will pass if all items are different))
Test[39] is ((ExpectationTests expectsToOnlyContain will fail if the items a has aone less))
Test[40] is ((ExpectationTests expectsToOnlyContain will pass if 2 sequences contain the same eliments no matter order))
Test[41] is ((ExpectationTests isNull fails if nof null))
Test[42] is ((ExpectationTests isNull succeeds if null))
Test[43] is ((ExploritoryTests Combinatory Gold Standard Testing))
Test[44] is ((ExploritoryTests Test that shuffle works correctly))
Test[45] is ((ExploritoryTests This is an ignored test))
Test[46] is ((FilteringTests filterByFailures should remove any non failing tests summaries from a collection of result summaries))
Test[47] is ((NaturalSortTests Can sort alpha words))
Test[48] is ((NaturalSortTests Can sort basic alphas))
Test[49] is ((NaturalSortTests Can sort numbers))
Test[50] is ((NaturalSortTests Can sort numbers and strings))
Test[51] is ((NaturalSortTests Can sort tuples by words with numbers as a sequence))
Test[52] is ((NaturalSortTests Can sort words with numbers))
Test[53] is ((Setup should be able to return a differnt environment then what was passed in))
Test[54] is ((Setup should return (Success, data, test environment) when successful))
Test[55] is ((Setup should return a TestEnvironment -> SetupFlow<'a> when beforeTest is called))
Test[56] is ((Setup should returns TestFlow.SetupFailure when the setup returns something other then success))
Test[57] is ((Setup should returns TestFlow.SetupFailure when the setup throws exception))
Test[58] is ((StandardsVerificationTests A test to check verification))
Test[59] is ((StandardsVerificationTests Can build the test of a query))
Test[60] is ((StandardsVerificationTests Can test a query))
Test[61] is ((Teardown should be called even if setup fails))
Test[62] is ((Teardown should be called if everything passes))
Test[63] is ((Teardown should be called with no data if setup throws an exception))
Test[64] is ((Teardown should get the failure when setup fails))
Test[65] is ((Teardown should recieve the setup data when setup fails with a fail result))
Test[66] is ((Teardown should return TestTemplate when setup, test and teardown are combined))
Test[67] is ((Teardown should return success when everything passes))
Test[68] is ((Theory`1 Here is a second theory test. (1.000000 * 1.000000) / 1.000000 = 1.000000))
Test[69] is ((Theory`1 Here is a second theory test. (10.000000 * 10.000000) / 10.000000 = 10.000000))
Test[70] is ((Theory`1 Here is a second theory test. (11.000000 * 11.000000) / 11.000000 = 11.000000))
Test[71] is ((Theory`1 Here is a second theory test. (12.000000 * 12.000000) / 12.000000 = 12.000000))
Test[72] is ((Theory`1 Here is a second theory test. (13.000000 * 13.000000) / 13.000000 = 13.000000))
Test[73] is ((Theory`1 Here is a second theory test. (14.000000 * 14.000000) / 14.000000 = 14.000000))
Test[74] is ((Theory`1 Here is a second theory test. (15.000000 * 15.000000) / 15.000000 = 15.000000))
Test[75] is ((Theory`1 Here is a second theory test. (16.000000 * 16.000000) / 16.000000 = 16.000000))
Test[76] is ((Theory`1 Here is a second theory test. (17.000000 * 17.000000) / 17.000000 = 17.000000))
Test[77] is ((Theory`1 Here is a second theory test. (18.000000 * 18.000000) / 18.000000 = 18.000000))
Test[78] is ((Theory`1 Here is a second theory test. (19.000000 * 19.000000) / 19.000000 = 19.000000))
Test[79] is ((Theory`1 Here is a second theory test. (2.000000 * 2.000000) / 2.000000 = 2.000000))
Test[80] is ((Theory`1 Here is a second theory test. (20.000000 * 20.000000) / 20.000000 = 20.000000))
Test[81] is ((Theory`1 Here is a second theory test. (3.000000 * 3.000000) / 3.000000 = 3.000000))
Test[82] is ((Theory`1 Here is a second theory test. (4.000000 * 4.000000) / 4.000000 = 4.000000))
Test[83] is ((Theory`1 Here is a second theory test. (5.000000 * 5.000000) / 5.000000 = 5.000000))
Test[84] is ((Theory`1 Here is a second theory test. (6.000000 * 6.000000) / 6.000000 = 6.000000))
Test[85] is ((Theory`1 Here is a second theory test. (7.000000 * 7.000000) / 7.000000 = 7.000000))
Test[86] is ((Theory`1 Here is a second theory test. (8.000000 * 8.000000) / 8.000000 = 8.000000))
Test[87] is ((Theory`1 Here is a second theory test. (9.000000 * 9.000000) / 9.000000 = 9.000000))
Test[88] is ((Theory`1 This is a theory Test.test converts 1 into "1"))
Test[89] is ((Theory`1 This is a theory Test.test converts 10 into "Buzz"))
Test[90] is ((Theory`1 This is a theory Test.test converts 15 into "FizzBuzz"))
Test[91] is ((Theory`1 This is a theory Test.test converts 2 into "2"))
Test[92] is ((Theory`1 This is a theory Test.test converts 3 into "Fizz"))
Test[93] is ((Theory`1 This is a theory Test.test converts 5 into "Buzz"))
Test[94] is ((Theory`1 This is a theory Test.test converts 6 into "Fizz"))
