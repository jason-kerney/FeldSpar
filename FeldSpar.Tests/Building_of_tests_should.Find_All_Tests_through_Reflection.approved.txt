Test[00] is ((A test should not require a setup))
Test[01] is ((A test should not require a teardown))
Test[02] is ((A test with a setup should return TestEnvironment -> SetupFlow<'a>))
Test[03] is ((A test with a setup should return an exception failure if the test throws an exception))
Test[04] is ((A test with a setup should return the failure when the test fails))
Test[05] is ((A test with a setup should return the setup failure without running the test if the setup fails))
Test[06] is ((A test with a setup should returns success when the test returns success))
Test[07] is ((A test without a setup should calls teardown even if it throws an exception))
Test[08] is ((A test without a setup should return success if the test is successful))
Test[09] is ((A test without a setup should returns the failure if the test fails))
Test[10] is ((A test without a teardown should return success if the test is successful))
Test[11] is ((A test without a teardown should should be called if the setup succeeds))
Test[12] is ((A test without a teardown should should not be called if setup fails))
Test[13] is ((Building of tests should A test that succeeds))
Test[14] is ((Building of tests should An exception thrown in a test should report exception failure))
Test[15] is ((Building of tests should Can Create multiple Tests From one Theory Test))
Test[16] is ((Building of tests should Find All Tests through Reflection))
Test[17] is ((Building of tests should Report exports to JSON))
Test[18] is ((Building of tests should Test that a failing test shows as a failure))
Test[19] is ((Building of tests should Testing that CanoicalizationOfStrings Works))
Test[20] is ((Building of tests should The environment of a test should canonicalize the description correctly into the name))
Test[21] is ((Building of tests should build a report from execution summaries that are sorted naturally))
Test[22] is ((Building of tests should build a report from the Execution Summaries))
Test[23] is ((Building of tests should get a representitive environment))
Test[24] is ((Building of tests should have structured summaries))
Test[25] is ((F# division theory test should divide and multiply and get the original number: (1.000000 * 1.000000) / 1.000000 = 1.000000))
Test[26] is ((F# division theory test should divide and multiply and get the original number: (10.000000 * 10.000000) / 10.000000 = 10.000000))
Test[27] is ((F# division theory test should divide and multiply and get the original number: (11.000000 * 11.000000) / 11.000000 = 11.000000))
Test[28] is ((F# division theory test should divide and multiply and get the original number: (12.000000 * 12.000000) / 12.000000 = 12.000000))
Test[29] is ((F# division theory test should divide and multiply and get the original number: (13.000000 * 13.000000) / 13.000000 = 13.000000))
Test[30] is ((F# division theory test should divide and multiply and get the original number: (14.000000 * 14.000000) / 14.000000 = 14.000000))
Test[31] is ((F# division theory test should divide and multiply and get the original number: (15.000000 * 15.000000) / 15.000000 = 15.000000))
Test[32] is ((F# division theory test should divide and multiply and get the original number: (16.000000 * 16.000000) / 16.000000 = 16.000000))
Test[33] is ((F# division theory test should divide and multiply and get the original number: (17.000000 * 17.000000) / 17.000000 = 17.000000))
Test[34] is ((F# division theory test should divide and multiply and get the original number: (18.000000 * 18.000000) / 18.000000 = 18.000000))
Test[35] is ((F# division theory test should divide and multiply and get the original number: (19.000000 * 19.000000) / 19.000000 = 19.000000))
Test[36] is ((F# division theory test should divide and multiply and get the original number: (2.000000 * 2.000000) / 2.000000 = 2.000000))
Test[37] is ((F# division theory test should divide and multiply and get the original number: (20.000000 * 20.000000) / 20.000000 = 20.000000))
Test[38] is ((F# division theory test should divide and multiply and get the original number: (3.000000 * 3.000000) / 3.000000 = 3.000000))
Test[39] is ((F# division theory test should divide and multiply and get the original number: (4.000000 * 4.000000) / 4.000000 = 4.000000))
Test[40] is ((F# division theory test should divide and multiply and get the original number: (5.000000 * 5.000000) / 5.000000 = 5.000000))
Test[41] is ((F# division theory test should divide and multiply and get the original number: (6.000000 * 6.000000) / 6.000000 = 6.000000))
Test[42] is ((F# division theory test should divide and multiply and get the original number: (7.000000 * 7.000000) / 7.000000 = 7.000000))
Test[43] is ((F# division theory test should divide and multiply and get the original number: (8.000000 * 8.000000) / 8.000000 = 8.000000))
Test[44] is ((F# division theory test should divide and multiply and get the original number: (9.000000 * 9.000000) / 9.000000 = 9.000000))
Test[45] is ((F# fizzbuzz example should correcty convert 1 into "1"))
Test[46] is ((F# fizzbuzz example should correcty convert 10 into "Buzz"))
Test[47] is ((F# fizzbuzz example should correcty convert 15 into "FizzBuzz"))
Test[48] is ((F# fizzbuzz example should correcty convert 2 into "2"))
Test[49] is ((F# fizzbuzz example should correcty convert 3 into "Fizz"))
Test[50] is ((F# fizzbuzz example should correcty convert 5 into "Buzz"))
Test[51] is ((F# fizzbuzz example should correcty convert 6 into "Fizz"))
Test[52] is ((F# fizzbuzz example should return "1" when given 1))
Test[53] is ((F# fizzbuzz example should return "Buzz" for all multiples of 5 up to 10))
Test[54] is ((F# fizzbuzz example should return "Buzz" when given 5))
Test[55] is ((F# fizzbuzz example should return "Fizz" for all multiples of 3 up to 10))
Test[56] is ((F# fizzbuzz example should return "Fizz" when given 3))
Test[57] is ((F# fizzbuzz example should return "FizzBuzz" for 15))
Test[58] is ((F# fizzbuzz example should return "FizzBuzz" for all multiples of 15 up to 32))
Test[59] is ((F# fizzbuzz example should return "FizzBuzz" for all multiples of 15, "Buzz" for remaining multiples of 5 and "Fizz" for all remaining multiples of 3 up to 500))
Test[60] is ((FeldSpar can ignore a test at compile time))
Test[61] is ((FeldSpar can perform combinitoriy gold standard testing))
Test[62] is ((FeldSpar can use a shuffle function to determine test order))
Test[63] is ((FilteringTests filterByFailures should remove any non failing tests summaries from a collection of result summaries))
Test[64] is ((NaturalSortTests Can sort alpha words))
Test[65] is ((NaturalSortTests Can sort basic alphas))
Test[66] is ((NaturalSortTests Can sort numbers))
Test[67] is ((NaturalSortTests Can sort numbers and strings))
Test[68] is ((NaturalSortTests Can sort tuples by words with numbers as a sequence))
Test[69] is ((NaturalSortTests Can sort words with numbers))
Test[70] is ((Setup should be able to return a differnt environment then what was passed in))
Test[71] is ((Setup should return (Success, data, test environment) when successful))
Test[72] is ((Setup should return a TestEnvironment -> SetupFlow<'a> when beforeTest is called))
Test[73] is ((Setup should returns TestFlow.SetupFailure when the setup returns something other then success))
Test[74] is ((Setup should returns TestFlow.SetupFailure when the setup throws exception))
Test[75] is ((Teardown should be called if everything passes))
Test[76] is ((Teardown should return TestTemplate when setup, test and teardown are combined))
Test[77] is ((Teardown should return success when everything passes))
Test[78] is ((When Scripting FeldSpar Should allow for a short hand syntax for creating scripting test data))
Test[79] is ((When Scripting FeldSpar Should convert from a list of scripting test data to an array of Tests))
Test[80] is ((When Scripting FeldSpar Should convert from scripting test data in to a Test))
Test[81] is ((When Scripting FeldSpar Should run a list of scripting test data and return Tests Results))
Test[82] is ((When checking against standards FeldSpar should be usable from within a verify block))
Test[83] is ((When checking against standards FeldSpar should check against a query rather then results))
Test[84] is ((When checking against standards FeldSpar should test a query and show results of old and new on failure))
Test[85] is ((When setup fails teardown should be called))
Test[86] is ((When setup fails teardown should be called with no data if setup threw an exception))
Test[87] is ((When setup fails teardown should get the failure))
Test[88] is ((When setup fails teardown should recieve the setup data))
Test[89] is ((When setup fails teardown should return with the setup failure even when teardown succeeds))
Test[90] is ((When the test fails teardown should be called))
Test[91] is ((When the test fails teardown should be called with setup data even if failure is an exception))
Test[92] is ((When the test fails teardown should be called with the failure from the test))
Test[93] is ((When the test fails teardown should return the test failure if the teardown succeeds))
